// Generated by CoffeeScript 1.9.1

Polymer('chat-element', {

  announcement : "",
  status : 'connected',
  messages : [],
  users : [],
  userName : 'sopan',

  avatar : "http://eightbitavatar.herokuapp.com/?id=" + escape(this.userName) + "&s=male&size=80",
  ready : function() {
    console.log("all ready");
  }

});


var defaultNames, sendMessage, showMessage, socket, template;

template = document.querySelector("chat-element");
console.log(template);

defaultNames = ["Killer Whale", "Giraffe", "Rabbit", "Polar Bear", "Cheetah", "Snow Leopard", "Eagle", "Fox", "Panda", "Salamander", "Jackal", "Elephant ", "Lion", "Horse", "Monkey", "Penguin ", "Wolf", "Dolphin", "Tiger", "Cat", "Shinigami", "Korra", "Aang", "Izumi", "Katara"];

socket = io.connect(document.location.origin, {
  reconnectionDelay: 200,
  reconnectionDelayMax: 1000
});

sendMessage = function(msg) {
  return socket.emit('chat:msg', {
    message: msg,
    nick: template.userName,
    avatar: template.avatar
  });
};

showMessage = function(msg) {
  template.messages.push(msg);
  return template.async(function() {
    var chatDiv;
    chatDiv = template.$.chatLog;
    return chatDiv.scrollTop = chatDiv.scrollHeight;
  });
};

template.sendMyMessage = function() {
  var $input;
  $input = $(template.$.input);
  if (socket.socket.connected === false) {
    return alert('Please wait while we reconnect');
  } else if ($input.val().trim() !== '') {
    sendMessage($input.val());
    return $input.val('');
  }
};

template.checkKey = function(e) {
  if (e.which === 13) {
    template.sendMyMessage();
  }
  return e.preventDefault();
};

socket.on('disconnect', function() {
  return template.status = 'disconnected';
});

socket.on('reconnect', function() {
  return template.status = 'connected';
});

socket.on('connect', function() {
  template.status = 'connected';
  socket.emit('chat:demand');
  socket.emit('announcement:demand');
  return socket.emit('presence:demand');
}); 

socket.on('chat:msg', function(msg) {
  var defaultName;
  defaultName = defaultNames[(Math.random() * defaultNames.length) >>> 0];
  if (msg.invalidNick) {
    return setTimeout(function() {
      msg.nick = template.userName = prompt('Sorry! You can\'t have this username.\nPlease enter another username', defaultName) || defaultName;
      return sendMessage(msg.message);
    }, 1);
  } else {
    return showMessage(msg);
  }
});

/*socket.on('announcement:data', function(data) {
  if (data['text'].length > 2) {
    $("#announcement-text")[0].innerHTML = data['text'];
    $("#announcement-area")[0].style.display = "block";
  } else {
    $("#announcement-area")[0].style.display = "none";
  }
  //$("#chat-heading")[0].innerHTML = data['heading'];
  return document.title = data['pageTitle'];
});*/

socket.on('chat:log', function(log) {
  return log.map(showMessage);
});

socket.on('presence:list', function(list) {
  return template.users = list;
});

setTimeout(function() {
  return $("#input").focus();
}, 1);
